auto [transE, boxE] = sRegistry.try_get<TransformComponent, BoxComponent>(entwCollision);
//                                    glm::vec3 callerBoxCenter = glm::vec3(transTB->trans.pos.x + boxTB->pos.x,
//                                                                          transTB->trans.pos.y + boxTB->pos.y,
//                                                                          transTB->trans.pos.z);
//                                    glm::vec3 objBoxCenter = glm::vec3(transE->trans.pos.x + boxE->pos.x,
//                                                                       transE->trans.pos.y + boxE->pos.y,
//                                                                       transE->trans.pos.z);
//                                    callertoObj = glm::vec2(objBoxCenter.x - callerBoxCenter.x, objBoxCenter.y - callerBoxCenter.y);
//                                    float collangle = glm::degrees(fmath::vectorToAngle(glm::vec3(callertoObj, 0.0)));
//                                    float dispangle = glm::degrees(fmath::vectorToAngle(dispTB->displace));
//                                    float colltoDisp = fmath::smallestAngleFrom(collangle,
//                                                                                dispangle);
//                                        //TODO: all of these need to filter entities to collide check to within specified range which will be max boxcomp size to avoid looping over entities across the world from each other
//                                    if (boxTB->type == 'c' && boxE->type == 'c'){
//    //BOX TO BE AND BOX ENVIRONMENT ARE BOTH RADIAL, CHECK ACCORDINGLY
//                                        bool cc = (glm::length((callerBoxCenter + dispTB->displace) - objBoxCenter) - boxE->rad - boxTB->rad) < 0;
//                                        if (cc){
//                                            free = false;
//                                            int sign = 1;
//                                            if (colltoDisp < 0) {sign = -1;}
//                                            glm::vec3 V = fmath::angleToVector(collangle + (90 * sign));
//                                            float udotv = (dispTB->displace.x * V.x) + (dispTB->displace.y * V.y);
//                                            float magvsq = glm::length(V) * glm::length(V);
//                                            deflection = V * (udotv / magvsq);
//                                                //TODO: check deflect against all other ents once more
//                                            deflect = true;
//                                        }
//
//                                    } else if (boxTB->type == 'c' && boxE->type == 's') {
//    //BOX TO BE IS RADIAL, BOX E IS RECTANGULAR, CHECK ACCORDINGLY
//                                        auto objToCaller = (callertoObj * -1.0f) + glm::vec2(dispTB->displace.x, dispTB->displace.y);
//                                        glm::vec3 objToCaller_r = glm::vec3(fmath::rotateVector(objToCaller, -transE->trans.rotation.z), 0.0);
////                                        bool cs = ((glm::abs(objToCaller_r.x) <= ((boxE->size.x / 2.0) + (boxTB->rad / 1.41))) &&
////                                                    (glm::abs(objToCaller_r.y) <= ((boxE->size.y / 2.0) + (boxTB->rad / 1.41))));
//
//
//
//                                        if (coll.isOverlap){
//                                            free = false;
//                                            //deflect...
//                                            deflect = true;
//                                            glm::vec3 V;
//                                            bool hittingWSide = (((boxE->size.x / 2.0) + boxTB->rad)) - (glm::abs(objToCaller_r.x)) <
//                                            (((boxE->size.y / 2.0) + boxTB->rad)) - (glm::abs(objToCaller_r.y));
//                                            bool hittingHSide = (((boxE->size.x / 2.0) + boxTB->rad)) - (glm::abs(objToCaller_r.x)) >
//                                            (((boxE->size.y / 2.0) + boxTB->rad)) - (glm::abs(objToCaller_r.y));
//
//
//                                            float sidehit = ((((boxE->size.x / 2.0) + boxTB->rad)) - (glm::abs(objToCaller_r.x))) -
//                                            ((((boxE->size.y / 2.0) + (boxTB->rad))) - (glm::abs(objToCaller_r.y)));
//                                            cout << "sidehit = " << sidehit << endl;
//                                            deflection = glm::vec3(0.0);
//                                            float thresh = boxTB->rad;
//
//                                            glm::vec2 normal;
//                                            if (hittingWSide){
//                                                if (objToCaller_r.x < 0){
//                                                    normal = glm::vec2(-1.0, 0.0);
//                                                    normal = fmath::rotateVector(normal, transE->trans.rotation.z);
//                                                } else {
//                                                    normal = glm::vec2(1.0, 0.0);
//                                                    normal = fmath::rotateVector(normal, transE->trans.rotation.z);
//                                                }
//                                            } else {
//                                                if (objToCaller_r.y < 0){
//                                                    normal = glm::vec2(0.0, -1.0);
//                                                    normal = fmath::rotateVector(normal, transE->trans.rotation.z);
//                                                } else {
//                                                    normal = glm::vec2(0.0, 1.0);
//                                                    normal = fmath::rotateVector(normal, transE->trans.rotation.z);
//                                                }
//                                            }
//
//
//                                            bool pointingAway = glm::abs(fmath::smallestAngleFrom(glm::degrees(fmath::vectorToAngle(dispTB->displace)), glm::degrees(fmath::vectorToAngle(normal)))) < 90.0;
//
//                                            if (pointingAway){
//                                                V = fmath::angleToVector(glm::degrees(fmath::vectorToAngle(dispTB->displace)) + 90.0);
//                                                free = true;
//                                                deflect = false;
//                                            } else if (hittingWSide){//sidehit < -thresh){
//                                                V = glm::vec3(0.0, (-2.0 * (objToCaller_r.x < 0)) + 1.0, 0.0);
//                                                V = fmath::rotateVector(V, transE->trans.rotation.z);
//                                                cout << "V: " << V.x << ", " << V.y << endl;
//                                                float udotv = (dispTB->displace.x * V.x) + (dispTB->displace.y * V.y);
//                                                deflection = V * udotv;
//                                            } else if (hittingHSide){//sidehit > thresh){
//                                                V = glm::vec3((-2.0 * (objToCaller_r.y < 0)) + 1.0, 0.0, 0.0);
//                                                V = fmath::rotateVector(V, transE->trans.rotation.z);
//                                                cout << "V: " << V.x << ", " << V.y << endl;
//                                                float udotv = (dispTB->displace.x * V.x) + (dispTB->displace.y * V.y);
//                                                deflection = V * udotv;
//                                            } else {
//                                                V = fmath::angleToVector(glm::degrees(fmath::vectorToAngle(dispTB->displace)) + 90.0);
//                                                free = true;
//                                                deflect = false;
//                                            }
////                                            V = fmath::rotateVector(V, transE->trans.rotation.z);
////                                            cout << "V: " << V.x << ", " << V.y << endl;
////                                            float udotv = (dispTB->displace.x * V.x) + (dispTB->displace.y * V.y);
////                                            deflection = V * udotv;
////                                            cout << "deflection: " << deflection.x << ", " << deflection.y << "\n";
//                                            sDiags["deflect"] = glm::degrees(fmath::vectorToAngle(deflection));
//                                            cout << "def angle: " << glm::degrees(fmath::vectorToAngle(deflection)) << ", deflect = " << deflect << endl;
////                                            cout << "\nV angle: " << glm::degrees(fmath::vectorToAngle(deflection));
//                                            cout << "disp angle: " << glm::degrees(fmath::vectorToAngle(dispTB->displace)) << endl << endl;
//
//                                        }
//
//                                    } else if   (boxTB->type == 's' && boxE->type == 's') {
//    //BOX TO BE AND BOX E ARE BOTH RECTANGULAR, CHECK ACCORDINGLY
//
//                                    } else if (boxTB->type == 's' && boxE->type == 'c') {
//    //BOX TO BE IS RECTANGULAR, BOX E IS RADIAL, CHECK ACCORDINGLY
//                                    }
